local Color = {}
function Color.new(id, description)
  return setmetatable({id = id, description = description},
                      {__add = function(a,b) return {id = a.id..';'..b.id,
                         description = a.description..","..b.description} end,
                       __tostring = function(t) return t.description end,
                       __index = Color})
end
function Color:encode() return "\\e["..self.id.."m" end
local graphic = {
  colors = {
    Black = Color.new("30", "fore:black"),
    Blue = Color.new("34", "fore:blue"),
    Green = Color.new("32", "fore:green"),
    Cyan = Color.new("36", "fore:cyan"),
    Red = Color.new("31", "fore:red"),
    Purple = Color.new("35", "fore:purple"),
    Brown = Color.new("33", "fore:brown"),
    White = Color.new("37", "fore:white"),
    Orange = Color.new("91", "fore:orange"),
    Violet = Color.new("95", "fore:violet"),
    NoStyle = Color.new("0", ""),
    Bold = Color.new("1", "bold"),
    Gray = Color.new("2", "notchangable"),
    Italic = Color.new("3", "italics"),
    Undercored = Color.new("4", "underlined"),
    Selected = Color.new("7", "eolfilled"), -- светло-красный
    Invisible = Color.new("8", "notvisible"),
    BgBlack = Color.new("40", "back:black"),
    BgBlue = Color.new("44", "back:blue"),
    BgGreen = Color.new("42", "back:green"),
    BgCyan = Color.new("46", "back:cyan"),
    BgRed = Color.new("41", "back:red"),
    BgPurple = Color.new("45", "back:purple"),
    BgBrown = Color.new("43", "back:brown"),
    BgWhite = Color.new("47", "back:white"),
    BgOrange = Color.new("101", "back:orange"),
    BgViolet = Color.new("105", "back:violet"),
  },
  glyphs = {
    skUnknown = "{U}",
    skAlias = " A ",
    skConst = " C ",
    skConverter = "C()",
    skDynLib = "LIB",
    skEnumField = ".EF",
    skField = "FLD",
    skForVar = " I ",
    skGenericParam = "[G]",
    skIterator = "I()",
    skLabel = "LBL",
    skLet = " L ",
    skMacro = "M[]",
    skModule = "MOD",
    skMethod = "M()",
    skPackage = "PKG",
    skParam = "(P)",
    skProc = "P()",
    skResult = " R ",
    skStub = "{S}",
    skTemp = "Tmp",
    skTemplate = "T[]",
    skType = " T ",
    skVar = " V ",
  },
}
graphic.error_style = {
  Hint = graphic.colors.BgGreen + graphic.colors.Undercored,
  Warning = graphic.colors.BgBrown + graphic.colors.Undercored + graphic.colors.Red,
  Error = graphic.colors.BgOrange + graphic.colors.Undercored + graphic.colors.Red,
}
graphic.associations = {
  -- Other stuff
  skUnknown = graphic.colors.Purple:encode(),
  skAlias = graphic.colors.Purple:encode(),
  skDynLib = graphic.colors.Purple:encode(),
  skPackage = graphic.colors.Purple:encode(),
  skModule = graphic.colors.Purple:encode(),
  skLabel = graphic.colors.Purple:encode(),
  skType = graphic.colors.Purple:encode(),
  skStub = graphic.colors.Purple:encode(),
  skTemp = graphic.colors.Purple:encode(),
  -- Fields and vars
  skField = graphic.colors.Cyan:encode(),
  skEnumField = graphic.colors.Cyan:encode(),
  skForVar = graphic.colors.Cyan:encode(),
  skLet = graphic.colors.Cyan:encode(),
  skVar = graphic.colors.Cyan:encode(),
  skParam = graphic.colors.Cyan:encode(),
  skResult = graphic.colors.Cyan:encode(),
  -- executables
  skProc = graphic.colors.Green:encode(),
  skConverter = graphic.colors.Green:encode(),
  skMethod = graphic.colors.Green:encode(),
  skIterator = graphic.colors.Green:encode(),
  -- compile-time
  skTemplate = graphic.colors.Brown:encode(),
  skMacro = graphic.colors.Brown:encode(),
  skConst = graphic.colors.Brown:encode(),
  skGenericParam = graphic.colors.Brown:encode(),
}
return graphic
